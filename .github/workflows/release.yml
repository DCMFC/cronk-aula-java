name: "Release"
on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

permissions:
  contents: read

env:
  TAG: ${{ github.ref_name }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: release

    outputs:
      hashes: ${{ steps.hashes.outputs.hashes }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: Build package
        run: |
          mvn --batch-mode --update-snapshots verify

      - name: Create package folder
        run: mkdir staging && cp target/*.jar staging

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: staging
          path: ./staging/
          if-no-files-found: error  # if no files are found, something's very wrong!

      - name: Generate hashes for provenance
        id: hashes
        run: |
          # Get hashes for wheels and tarballs, encode in a single-line base64 string
          echo "hashes=$(sha256sum ./staging/* | base64 -w0)" >> $GITHUB_OUTPUT

  provenance:
    name: Publish provenance
    needs: [build]

    permissions:
      actions: read  # To read the workflow path.
      id-token: write  # To sign the provenance.
      contents: write  # To add assets to a release.

    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      provenance-name: provenance-cronk-$TAG.intoto.jsonl
      base64-subjects: "${{ needs.build.outputs.hashes }}"
      upload-assets: true

  github-release:
    name: Publish to GitHub Releases
    runs-on: ubuntu-latest
    needs: [provenance]

    permissions:
      contents: write  # to modify the GitHub Release

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1

      - name: Upload artifacts to GitHub
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # v0.1.15
        with:
          files: staging/*

  maven-release:
    name: Publish to Maven(Test)
    runs-on: ubuntu-latest
    needs: [build,github-release]  # only publish if provenance available in GH Releases

    permissions:
      id-token: write # for OIDC publishing

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1

      - name: Confirm artifacts' integrity
        run: |
          # compare the hashes of the downloaded artifacts with the hashes calculated
          # when they were uploaded
          echo "${{ needs.build.outputs.hashes }}" | \
            base64 --decode | \
            sha256sum --check --status
